// Code generated by MockGen. DO NOT EDIT.
// Source: employee-usecase.go

// Package mock_usecase is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entity "simple-crud-employee/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockEmployeeRepo is a mock of EmployeeRepo interface.
type MockEmployeeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepoMockRecorder
}

// MockEmployeeRepoMockRecorder is the mock recorder for MockEmployeeRepo.
type MockEmployeeRepoMockRecorder struct {
	mock *MockEmployeeRepo
}

// NewMockEmployeeRepo creates a new mock instance.
func NewMockEmployeeRepo(ctrl *gomock.Controller) *MockEmployeeRepo {
	mock := &MockEmployeeRepo{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepo) EXPECT() *MockEmployeeRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmployeeRepo) Create(payload *entity.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmployeeRepoMockRecorder) Create(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmployeeRepo)(nil).Create), payload)
}

// Delete mocks base method.
func (m *MockEmployeeRepo) Delete(employee *entity.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeRepoMockRecorder) Delete(employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeRepo)(nil).Delete), employee)
}

// GetDetail mocks base method.
func (m *MockEmployeeRepo) GetDetail(employeeID string) (*entity.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", employeeID)
	ret0, _ := ret[0].(*entity.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockEmployeeRepoMockRecorder) GetDetail(employeeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockEmployeeRepo)(nil).GetDetail), employeeID)
}

// GetList mocks base method.
func (m *MockEmployeeRepo) GetList(req *entity.QueryRequest) (*entity.EmployeeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", req)
	ret0, _ := ret[0].(*entity.EmployeeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockEmployeeRepoMockRecorder) GetList(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockEmployeeRepo)(nil).GetList), req)
}

// Update mocks base method.
func (m *MockEmployeeRepo) Update(payload entity.Employee, data *entity.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", payload, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEmployeeRepoMockRecorder) Update(payload, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeRepo)(nil).Update), payload, data)
}
